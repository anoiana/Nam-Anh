{
  "articles": [
    {
      "path": "generate-sample-with-rjags.html",
      "title": "Generate Samples with Rjags",
      "description": "This note summarizes methods to generate samples and calculate measures of interest through such generated samples.",
      "author": [
        {
          "name": "Nam-Anh",
          "url": {}
        }
      ],
      "date": "`r Sys.Date()`",
      "contents": "\n\nContents\n1 Sampling with rjags\n1.1 Generalized t distribution\n1.2 Transformation\n1.3 A more complicated problem\n\n2 Prediction with unknown parameters\n\n1 Sampling with rjags\n1.1 Generalized t distribution\nSuppose one wants to generate samples from generalized \\(t\\) distribution whose density function is as follows\n\\[\\begin{equation}\nf(x) = \\frac{c\\sigma^{-1}}{\\bigg[n+\\Big(\\frac{x-\\theta}{\\sigma}\\Big)^2\\bigg]^{0.5(n+1)}},\n\\end{equation}\\]\none says \\(X \\sim t(\\theta,\\sigma,n)\\), where \\(\\theta, \\sigma\\) and \\(n\\) are location, scale parameter and degree of freedom.\nTo generate samples of \\(X\\), one can use rt function in R to simulate from standard \\(t\\) distribution and then transform such samples. one, however, now wants to simulate generalized \\(t\\) distribution directly, which does not require an extra step of transformation. To this end, one employs rjags which is popular for obtaining samples from posterior distribution in Bayesian framework.\nIt is worth noting that the generalized \\(t\\) distribution function dt in rjags requires mean and precision rather than location and scale as its parameters. For example, one simulates samples from a generalized \\(t\\) distribution whose mean and variance are 10 and 0.5, one shall need to plug in values of 10 and 1/0.5 as its first two parameters (third parameter is degree of freedom which equals 4).\n\n\nhide\n\nmodel_string <- textConnection(\n  \"model{\n Y ~ dt(10,2,4)\n}\")\nmodel <- jags.model(model_string, n.chains = 1, quiet = T)\n#update(model, 1000, progress.bar=\"none\")\nparams <- c(\"Y\")\nsamples <- coda.samples(model,\n                        variable.names=params,\n                        n.iter=1000, progress.bar=\"none\")\n\n##################\nx = samples[[1]][,1] %>% sort()\n\n\n\nLet us compare with samples obtained by R function\n\n\nhide\n\ncurve(wiqid::dt3(x,10, sqrt(0.5),4), xlim = c(0,20), lty = 3,, ylab = \"density\")\npoints(x,wiqid::dt3(x,10,sqrt(0.5),4), col = \"red\", type = \"l\", lty = 2)\n\n\n\n\n1.2 Transformation\nOne sometimes requires simulating samples from a transformed random variable, i.e one generates \\(Y = (2Z+1)^3\\), where \\(Z \\sim \\mathcal{N}(0,1)\\) and calculate \\(\\mathbb{E}(Y)\\) and \\(\\mathbb{P}(Y \\ge10)\\). Such measures can be obtained analytically, more specifically \\(\\mathbb{E}(Y) = 13\\) and \\(\\mathbb{P}(Y \\ge 10) = 0.28\\). [fouley2013?]\nOne now uses rjags to simulate samples\n\n\nhide\n\nmodel_string <- textConnection(\n  \"model{\n Z ~ dnorm(0,1)\n Y <- pow(2*Z+1,3)\n P<- step(Y-10)\n}\")\nmodel <- jags.model(model_string, n.chains = 1, quiet = T)\nupdate(model, 1000, progress.bar=\"none\")\nparams <- c(\"Y\",\"P\")\nsamples <- coda.samples(model,\n                        variable.names=params,\n                        n.iter=2000, progress.bar=\"none\")\n\n##################\n\nexp_val = mean(samples[[1]][,2])\nprob = mean(samples[[1]][,1])\n\n\n\nand one obtained \\(\\mathbb{E}(Y) =\\) 13.6303012 and \\(\\mathbb{P}(Y\\ge 10) =\\) 0.2905.\n1.3 A more complicated problem\nSuppose one is required calculating how many items can be fixed with $1000 given the cost to repair an item follows gamma distribution with mean \\(\\mu = 100\\) and standard deviation \\(\\sigma = 50\\), i.e\n\\[\\begin{equation}\nX \\sim \\mathcal{G}am(4, 0.04)\n\\end{equation}\\]\none implements as follows\n\n\nhide\n\nmodel_string <- textConnection(\n  \"model{\n  for(i in 1:n){Y[i] ~ dgamma(4,0.04)}\n  sim[1]<- Y[1]\n  for(i in 2:n){sim[i] <- sim[i-1]+Y[i]}\n  for(i in 1:n){order[i]<- step(1000-sim[i])}\n  item<- sum(order[])\n  check <- step(sim[n]-1000)\n  \n}\")\ndata = list(n=20)\nmodel <- jags.model(model_string, n.chains = 1, data = data, quiet = T)\nupdate(model, 1000, progress.bar=\"none\")\nparams <- c(\"item\",\"check\")\nsamples <- coda.samples(model,\n                        variable.names=params,\n                        n.iter=10000, progress.bar=\"none\")\n\n##################\n\nitem = samples[[1]][,2] %>% mean()\ncheck = samples[[1]][,1] %>% mean()\n\n\n\nMean of item is 9.5874 indicates there are about 10 items which can be repaired, Mean of check equals 1 indicates \\(n=20\\) is sufficient.\n2 Prediction with unknown parameters\nfor the sake of ease, one shall consider a mixed distribution as follows\n\\[\\begin{equation}\nX = K\\mathcal{N}(0,1) + (1-K)\\mathcal{N}(5,1),\n\\end{equation}\\]\nwhere \\(K \\sim \\mathcal{B}er(0.3)\\). Alternatively, above distribution can be rewritten as follows\n\\[\\begin{equation}\nf(x) = \\int f(y|k)f(k)dk,\n\\tag{1}\n\\end{equation}\\]\nwhich is predictive prior distribution, where \\(k\\) was defined above, and \\(Y|K=1 \\sim \\mathcal{N}(0,1)\\) while \\(Y|K=0 \\sim \\mathcal{N}(5,1)\\). To simulate samples of above distribution, one employs Bernoulli and Normal distributions as follows\n\n\nhide\n\nmodel_string <- textConnection(\n  \"model{\nalpha ~ dbin(0.3,1)\nx1 ~ dnorm(0,1)\nx2 ~ dnorm(5,1)\n# x = alpha*x1 + (1-alpha)*x2\nx = ifelse(alpha==1,x1,x2)\n}\")\n\ndata = list(n=20)\nmodel <- jags.model(model_string, n.chains = 1, quiet = T)\nupdate(model, 1000, progress.bar=\"none\")\nparams <- c(\"x\",\"alpha\")\nsamples <- coda.samples(model,\n                        variable.names=params,\n                        n.iter=10000, progress.bar=\"none\")\n\nsamples[[1]][,2] %>% hist()\n\n\n\n(1) can be expended on distribution of \\(K\\) that is known as prior distribution. For example, one wants to estimate, of 20 new students, how many ones will join painting club given the number of people joining the painting club follows Binomial distribution whose second paprameter follows Beta distribution. i.e\n\\[\\begin{equation}\nX \\sim \\mathcal{B}in(20,\\pi), \\quad \\pi \\sim \\mathcal{B}eta(3,2).\n\\end{equation}\\]\nThus, in rjags code one has\n\n\nhide\n\nmodel_string <- textConnection(\n  \"model{\n  p ~ dbeta(3,10)\n  x ~ dbin(p,20)}\"\n  \n  )\n\nmodel <- jags.model(model_string, n.chains = 1, quiet = T)\nupdate(model, 1000, progress.bar=\"none\")\nparams <- c(\"x\")\nsamples <- coda.samples(model,\n                        variable.names=params,\n                        n.iter=10000, progress.bar=\"none\")\n\nsummary(samples)\n\n\n\nIterations = 1001:11000\nThinning interval = 1 \nNumber of chains = 1 \nSample size per chain = 10000 \n\n1. Empirical mean and standard deviation for each variable,\n   plus standard error of the mean:\n\n          Mean             SD       Naive SE Time-series SE \n       4.64110        2.91076        0.02911        0.02911 \n\n2. Quantiles for each variable:\n\n 2.5%   25%   50%   75% 97.5% \n    0     2     4     6    11 \n\nhence, 5 of 20 new students will join the club. If one wants to calculate probability that there is at least 2 students who will join the club, the result is\n\n\nhide\n\nmean(samples[[1]][,1]>=5)\n\n\n[1] 0.474\n\n\n\n\n",
      "last_modified": "2022-01-16T02:59:05-05:00"
    },
    {
      "path": "index.html",
      "title": "Bayesian Statistics",
      "description": "\"Begin with an estimate of the probability that any claim, belief, hypothesis is true, then look at any new data and update the probability given the new data.\"\n\n-Steven Novella-\n",
      "author": [],
      "contents": "\n\n\n\n",
      "last_modified": "2022-01-16T02:59:06-05:00"
    }
  ],
  "collections": []
}
