list(mulog=mulog,sigmalog=sigmalog)
}
# Chunk 8
## Computes the hyperparameters for the informative prior distributions
m.pi <- .5
s.pi <- sqrt(.125)
a.pi <- betaPar(m.pi,s.pi)$a
b.pi <- betaPar(m.pi,s.pi)$b
m.gamma <- .5
s.gamma <- sqrt(.125)
a.gamma <- betaPar(m.gamma,s.gamma)$a
b.gamma <- betaPar(m.gamma,s.gamma)$b
m.rho <- 0.8
s.rho <- 0.2
tau.rho <- 1/s.rho^2
mu.amb <- 120
sd.amb <- 20
m.amb <- lognPar(mu.amb,sd.amb)$mulog
s.amb <- lognPar(mu.amb,sd.amb)$sigmalog
tau.amb <- 1/s.amb^2
mu.hosp <- 5500
sd.hosp <- 980
m.hosp <- lognPar(mu.hosp,sd.hosp)$mulog
s.hosp <- lognPar(mu.hosp,sd.hosp)$sigmalog
tau.hosp <- 1/s.hosp^2
# Chunk 9
N = 1000
c.drug <- c(110,520)
model_string <- textConnection(
"model{
#likelihood
for(i in 1:N.studies){
se[i] ~ dbin(pi[1],n[i])
amb[i] ~ dbin(gamma,se[i])
}
# prior
pi[1] ~ dbeta(a.pi,b.pi)
pi[2]<- pi[1]*rho
rho ~ dnorm(m.rho, tau.rho)
gamma ~ dbeta(a.gamma,b.gamma)
c.amb ~ dlnorm(m.amb,tau.amb)
c.hosp ~ dlnorm(m.hosp,tau.hosp)
# Predictive distributions on the clinical outcomes
for(i in 1:2){
SE[i] ~ dbin(pi[i],N)
A[i] ~ dbin(gamma,SE[i])
H[i] <- SE[i] - A[i]
}
}")
# data setup
dat = list("a.pi" = a.pi,"b.pi" = b.pi,"a.gamma" = a.gamma,"b.gamma" = b.gamma,
"m.amb" = m.amb,"tau.amb" = tau.amb,
"m.hosp" = m.hosp,"tau.hosp" = tau.hosp, "m.rho" = m.rho,
"tau.rho" = tau.rho,"se" = se,"amb" = amb,
"N.studies" = N.studies, "n" = n, N = N)
# initial stochastic variables
inits <- function(){
SE=rbinom(2,N,.2)
rho=runif(1)
list("pi"=c(runif(1),NA),gamma=runif(1),c.amb=rlnorm(1),
c.hosp=rlnorm(1),rho = rho,SE=SE,A=rbinom(2,SE,.2)
)
}
model <- jags.model(model_string, data =  dat, inits = inits, n.chains = 2)
update(model, 10000, progress.bar="none")
# get samples
samples <- coda.samples(model,
variable.names=params,
n.iter=10000, progress.bar="none")
params
# parameters of interest
params <- c("pi","gamma","c.amb","c.hosp","rho","SE","A","H")
# get samples
samples <- coda.samples(model,
variable.names=params,
n.iter=10000, progress.bar="none")
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
if(!library(pacman, logical.return = TRUE)) install.packages("pacman")
pacman::p_load(tidyverse, rjags, magrittr, kableExtra, distill, knitr)
lb = function(...){
x = unlist(strsplit(as.character(rlang::expr(...)),"\\."))
word = switch(which(c("tab","fig","eq")%in% x[1]),"Table ","Figure ","Eq.")
paste0(word,"\\@ref(",x[1],":",x[2],")")
}
MyTable = function(x, cap = NULL, ...){
kableExtra::kbl(x, booktab = T, caption = cap,...)%>%
kable_styling(latex_options = "striped")
}
# Chunk 2
.makebox{
border: 2px solid #566573;
border-radius: 5px;
margin-bottom: 15px;
}
# Chunk 3: tab1
tab1<-
tibble(decision = c("d1","d2","d3","probability"),
`state 1` = c(12,15,5,0.5),
`state 2` = c(9,11,18,0.2),
`state 3` = c(13,8,10,0.3)
)
MyTable(tab1, "current information.")
# Chunk 4
exp_s<-
sapply(tab1[-4,-1], function(x) as.matrix(tab1[4,-1])%*%x)
exp_s
# Chunk 5
exp_max<-
as.matrix(tab1[4,-1])%*%sapply(tab1[-4,-1], max)%>% c()
exp_max
# Chunk 6: tab2
set.seed(1234)
## Generates data for the number of side effects under t=0
N.studies <- 5 # the number of accessible studies
sample.size <- 32 # potential sample size in each study
prop.pi <- .24 # TRUE VALUE of the proportion of exposure
n <- rpois(N.studies,sample.size) # we simulate sample size for N.studies studies.
se <- rbinom(N.studies,n,prop.pi) # simulate the number of exposure for each study
## Generates the data for the number of patients with exposure requiring ambulatory care
prop.gamma <- .619 # TRUE VALUE of the proportion of patients exposed requiring ambulatory
amb <- rbinom(N.studies,se,prop.gamma) # simulate the number of ambulatory
dat<- tibble(
Study = 1:5,
n = n,
exposure = se,
ambulatory = amb)
MyTable(dat, "Observed data")
# Chunk 7
betaPar <- function(m,s){
a <- m*((m*(1-m)/s^2)-1)
b <- (1-m)*((m*(1-m)/s^2)-1)
list(a=a,b=b)
}
lognPar <- function(m,s) {
s2 <- s^2
mulog <- log(m)-0.5*log(1+s2/m^2)
s2log <- log(1+(s2/m^2))
sigmalog <- sqrt(s2log)
list(mulog=mulog,sigmalog=sigmalog)
}
# Chunk 8
## Computes the hyperparameters for the informative prior distributions
m.pi <- .5
s.pi <- sqrt(.125)
a.pi <- betaPar(m.pi,s.pi)$a
b.pi <- betaPar(m.pi,s.pi)$b
m.gamma <- .5
s.gamma <- sqrt(.125)
a.gamma <- betaPar(m.gamma,s.gamma)$a
b.gamma <- betaPar(m.gamma,s.gamma)$b
m.rho <- 0.8
s.rho <- 0.2
tau.rho <- 1/s.rho^2
mu.amb <- 120
sd.amb <- 20
m.amb <- lognPar(mu.amb,sd.amb)$mulog
s.amb <- lognPar(mu.amb,sd.amb)$sigmalog
tau.amb <- 1/s.amb^2
mu.hosp <- 5500
sd.hosp <- 980
m.hosp <- lognPar(mu.hosp,sd.hosp)$mulog
s.hosp <- lognPar(mu.hosp,sd.hosp)$sigmalog
tau.hosp <- 1/s.hosp^2
# Chunk 9
N = 1000
c.drug <- c(110,520)
model_string <- textConnection(
"model{
#likelihood
for(i in 1:N.studies){
se[i] ~ dbin(pi[1],n[i])
amb[i] ~ dbin(gamma,se[i])
}
# prior
pi[1] ~ dbeta(a.pi,b.pi)
pi[2]<- pi[1]*rho
rho ~ dnorm(m.rho, tau.rho)
gamma ~ dbeta(a.gamma,b.gamma)
c.amb ~ dlnorm(m.amb,tau.amb)
c.hosp ~ dlnorm(m.hosp,tau.hosp)
# Predictive distributions on the clinical outcomes
for(i in 1:2){
SE[i] ~ dbin(pi[i],N)
A[i] ~ dbin(gamma,SE[i])
H[i] <- SE[i] - A[i]
}
}")
# data setup
dat = list("a.pi" = a.pi,"b.pi" = b.pi,"a.gamma" = a.gamma,"b.gamma" = b.gamma,
"m.amb" = m.amb,"tau.amb" = tau.amb,
"m.hosp" = m.hosp,"tau.hosp" = tau.hosp, "m.rho" = m.rho,
"tau.rho" = tau.rho,"se" = se,"amb" = amb,
"N.studies" = N.studies, "n" = n, N = N)
# initial stochastic variables
inits <- function(){
SE=rbinom(2,N,.2)
rho=runif(1)
list("pi"=c(runif(1),NA),gamma=runif(1),c.amb=rlnorm(1),
c.hosp=rlnorm(1),rho = rho,SE=SE,A=rbinom(2,SE,.2)
)
}
model <- jags.model(model_string, data =  dat, inits = inits, n.chains = 2)
update(model, 10000, progress.bar="none")
# parameters of interest
params <- c("pi","gamma","c.amb","c.hosp","rho","SE","A","H")
# get samples
samples <- coda.samples(model,
variable.names=params,
n.iter=10000, progress.bar="none")
model_string <- textConnection(
"model{
#likelihood
for(i in 1:N.studies){
se[i] ~ dbin(pi[1],n[i])
amb[i] ~ dbin(gamma,se[i])
}
# prior
pi[1] ~ dbeta(a.pi,b.pi)
pi[2]<- pi[1]*rho
rho ~ dnorm(m.rho, tau.rho)
gamma ~ dbeta(a.gamma,b.gamma)
c.amb ~ dlnorm(m.amb,tau.amb)
c.hosp ~ dlnorm(m.hosp,tau.hosp)
# Predictive distributions on the clinical outcomes
for(i in 1:2){
SE[i] ~ dbin(pi[i],N)
A[i] ~ dbin(gamma,SE[i])
H[i] <- SE[i] - A[i]
}
}")
# data setup
dat = list("a.pi" = a.pi,"b.pi" = b.pi,"a.gamma" = a.gamma,"b.gamma" = b.gamma,
"m.amb" = m.amb,"tau.amb" = tau.amb,
"m.hosp" = m.hosp,"tau.hosp" = tau.hosp, "m.rho" = m.rho,
"tau.rho" = tau.rho,"se" = se,"amb" = amb,
"N.studies" = N.studies, "n" = n, N = N)
# initial stochastic variables
inits <- function(){
SE=rbinom(2,N,.2)
rho=runif(1)
list("pi"=c(runif(1),NA),gamma=runif(1),c.amb=rlnorm(1),
c.hosp=rlnorm(1),rho = rho,SE=SE,A=rbinom(2,SE,.2)
)
}
model <- jags.model(model_string, data =  dat, inits = inits, n.chains = 2)
update(model, 10000, progress.bar="none")
# parameters of interest
params <- c("pi","gamma","c.amb","c.hosp","rho","SE","A","H")
# get samples
samples <- coda.samples(model,
variable.names=params,
n.iter=10000, progress.bar="none")
summary(samples)[[2]] |> round(4)
model_string <- textConnection(
"model{
#likelihood
for(i in 1:N.studies){
se[i] ~ dbin(pi[1],n[i])
amb[i] ~ dbin(gamma,se[i])
}
# prior
pi[1] ~ dbeta(a.pi,b.pi)
pi[2]<- pi[1]*rho
rho ~ dnorm(m.rho, tau.rho)
gamma ~ dbeta(a.gamma,b.gamma)
c.amb ~ dlnorm(m.amb,tau.amb)
c.hosp ~ dlnorm(m.hosp,tau.hosp)
# Predictive distributions on the clinical outcomes
for(i in 1:2){
SE[i] ~ dbin(pi[i],N)
A[i] ~ dbin(gamma,SE[i])
H[i] <- SE[i] - A[i]
}
r<- c(SE,A,H)
}")
# data setup
dat = list("a.pi" = a.pi,"b.pi" = b.pi,"a.gamma" = a.gamma,"b.gamma" = b.gamma,
"m.amb" = m.amb,"tau.amb" = tau.amb,
"m.hosp" = m.hosp,"tau.hosp" = tau.hosp, "m.rho" = m.rho,
"tau.rho" = tau.rho,"se" = se,"amb" = amb,
"N.studies" = N.studies, "n" = n, N = N)
# initial stochastic variables
inits <- function(){
SE=rbinom(2,N,.2)
rho=runif(1)
list("pi"=c(runif(1),NA),gamma=runif(1),c.amb=rlnorm(1),
c.hosp=rlnorm(1),rho = rho,SE=SE,A=rbinom(2,SE,.2)
)
}
model <- jags.model(model_string, data =  dat, inits = inits, n.chains = 2)
update(model, 10000, progress.bar="none")
# parameters of interest
params <- c("pi","gamma","c.amb","c.hosp","rho","SE","A","H", "r")
# get samples
samples <- coda.samples(model,
variable.names=params,
n.iter=10000, progress.bar="none")
summary
samples
model_string <- textConnection(
"model{
#likelihood
for(i in 1:N.studies){
se[i] ~ dbin(pi[1],n[i])
amb[i] ~ dbin(gamma,se[i])
}
# prior
pi[1] ~ dbeta(a.pi,b.pi)
pi[2]<- pi[1]*rho
rho ~ dnorm(m.rho, tau.rho)
gamma ~ dbeta(a.gamma,b.gamma)
c.amb ~ dlnorm(m.amb,tau.amb)
c.hosp ~ dlnorm(m.hosp,tau.hosp)
# Predictive distributions on the clinical outcomes
for(i in 1:2){
SE[i] ~ dbin(pi[i],N)
A[i] ~ dbin(gamma,SE[i])
H[i] <- SE[i] - A[i]
}
}")
# data setup
dat = list("a.pi" = a.pi,"b.pi" = b.pi,"a.gamma" = a.gamma,"b.gamma" = b.gamma,
"m.amb" = m.amb,"tau.amb" = tau.amb,
"m.hosp" = m.hosp,"tau.hosp" = tau.hosp, "m.rho" = m.rho,
"tau.rho" = tau.rho,"se" = se,"amb" = amb,
"N.studies" = N.studies, "n" = n, N = N)
# initial stochastic variables
inits <- function(){
SE=rbinom(2,N,.2)
rho=runif(1)
list("pi"=c(runif(1),NA),gamma=runif(1),c.amb=rlnorm(1),
c.hosp=rlnorm(1),rho = rho,SE=SE,A=rbinom(2,SE,.2)
)
}
model <- jags.model(model_string, data =  dat, inits = inits, n.chains = 2)
update(model, 10000, progress.bar="none")
# parameters of interest
params <- c("pi","gamma","c.amb","c.hosp","rho","SE","A","H")
# get samples
samples <- coda.samples(model,
variable.names=params,
n.iter=10000, progress.bar="none")
# get samples
samples <- coda.samples(model,
variable.names=params,
n.iter=10000, progress.bar="none")
model <- jags.model(model_string, data =  dat, inits = inits, n.chains = 2)
# data setup
dat = list("a.pi" = a.pi,"b.pi" = b.pi,"a.gamma" = a.gamma,"b.gamma" = b.gamma,
"m.amb" = m.amb,"tau.amb" = tau.amb,
"m.hosp" = m.hosp,"tau.hosp" = tau.hosp, "m.rho" = m.rho,
"tau.rho" = tau.rho,"se" = se,"amb" = amb,
"N.studies" = N.studies, "n" = n, N = N)
# initial stochastic variables
inits <- function(){
SE=rbinom(2,N,.2)
rho=runif(1)
list("pi"=c(runif(1),NA),gamma=runif(1),c.amb=rlnorm(1),
c.hosp=rlnorm(1),rho = rho,SE=SE,A=rbinom(2,SE,.2)
)
}
model <- jags.model(model_string, data =  dat, inits = inits, n.chains = 2)
model_string <- textConnection(
"model{
#likelihood
for(i in 1:N.studies){
se[i] ~ dbin(pi[1],n[i])
amb[i] ~ dbin(gamma,se[i])
}
# prior
pi[1] ~ dbeta(a.pi,b.pi)
pi[2]<- pi[1]*rho
rho ~ dnorm(m.rho, tau.rho)
gamma ~ dbeta(a.gamma,b.gamma)
c.amb ~ dlnorm(m.amb,tau.amb)
c.hosp ~ dlnorm(m.hosp,tau.hosp)
# Predictive distributions on the clinical outcomes
for(i in 1:2){
SE[i] ~ dbin(pi[i],N)
A[i] ~ dbin(gamma,SE[i])
H[i] <- SE[i] - A[i]
}
}")
# data setup
dat = list("a.pi" = a.pi,"b.pi" = b.pi,"a.gamma" = a.gamma,"b.gamma" = b.gamma,
"m.amb" = m.amb,"tau.amb" = tau.amb,
"m.hosp" = m.hosp,"tau.hosp" = tau.hosp, "m.rho" = m.rho,
"tau.rho" = tau.rho,"se" = se,"amb" = amb,
"N.studies" = N.studies, "n" = n, N = N)
# initial stochastic variables
inits <- function(){
SE=rbinom(2,N,.2)
rho=runif(1)
list("pi"=c(runif(1),NA),gamma=runif(1),c.amb=rlnorm(1),
c.hosp=rlnorm(1),rho = rho,SE=SE,A=rbinom(2,SE,.2)
)
}
model <- jags.model(model_string, data =  dat, inits = inits, n.chains = 2)
update(model, 10000, progress.bar="none")
# parameters of interest
params <- c("pi","gamma","c.amb","c.hosp","rho","SE","A","H")
# get samples
samples <- coda.samples(model,
variable.names=params,
n.iter=10000, progress.bar="none")
model_string <- textConnection(
"model{
#likelihood
for(i in 1:N.studies){
se[i] ~ dbin(pi[1],n[i])
amb[i] ~ dbin(gamma,se[i])
}
# prior
pi[1] ~ dbeta(a.pi,b.pi)
pi[2]<- pi[1]*rho
rho ~ dnorm(m.rho, tau.rho)
gamma ~ dbeta(a.gamma,b.gamma)
c.amb ~ dlnorm(m.amb,tau.amb)
c.hosp ~ dlnorm(m.hosp,tau.hosp)
# Predictive distributions on the clinical outcomes
for(i in 1:2){
SE[i] ~ dbin(pi[i],N)
A[i] ~ dbin(gamma,SE[i])
H[i] <- SE[i] - A[i]
}
}")
# data setup
dat = list("a.pi" = a.pi,"b.pi" = b.pi,"a.gamma" = a.gamma,"b.gamma" = b.gamma,
"m.amb" = m.amb,"tau.amb" = tau.amb,
"m.hosp" = m.hosp,"tau.hosp" = tau.hosp, "m.rho" = m.rho,
"tau.rho" = tau.rho,"se" = se,"amb" = amb,
"N.studies" = N.studies, "n" = n, N = N)
# initial stochastic variables
inits <- function(){
SE=rbinom(2,N,.2)
rho=runif(1)
list("pi"=c(runif(1),NA),gamma=runif(1),c.amb=rlnorm(1),
c.hosp=rlnorm(1),rho = rho,SE=SE,A=rbinom(2,SE,.2)
)
}
model <- jags.model(model_string, data =  dat, inits = inits, n.chains = 2)
update(model, 10000, progress.bar="none")
# parameters of interest
params <- c("pi","gamma","c.amb","c.hosp","rho","SE","A","H")
# get samples
samples <- coda.samples(model,
variable.names=params,
n.iter=10000, progress.bar="none")
summary(samples)[[2]] |> round(4)
sampels
samples
coda::gelman.diag(samples)
samples
coda::gelman.diag(samples)
plot(samples)
coda::autocorr(samples)
coda::autocorr(samples, lag = 1)
coda::effectiveSize(samples)
coda::gelman.diag(samples)
coda::autocorr(samples, lag = 1)
## Generates data for the number of side effects under t=0
N.studies <- 5
sample.size <- 32
prop.pi <- .24
n <- rpois(N.studies,sample.size)
se <- rbinom(N.studies,n,prop.pi)
## Generates the data for the number of patients with side effects requiring ambulatory care
prop.gamma <- .619
amb <- rbinom(N.studies,se,prop.gamma)
## Computes the hyperparameters for the informative prior distributions
m.pi <- .5
s.pi <- sqrt(.125)
a.pi <- betaPar(m.pi,s.pi)$a
b.pi <- betaPar(m.pi,s.pi)$b
m.gamma <- .5
s.gamma <- sqrt(.125)
a.gamma <- betaPar(m.gamma,s.gamma)$a
b.gamma <- betaPar(m.gamma,s.gamma)$b
m.rho <- 0.8
s.rho <- 0.2
tau.rho <- 1/s.rho^2
mu.amb <- 120
sd.amb <- 20
m.amb <- lognPar(mu.amb,sd.amb)$mulog
s.amb <- lognPar(mu.amb,sd.amb)$sigmalog
tau.amb <- 1/s.amb^2
mu.hosp <- 5500
sd.hosp <- 980
m.hosp <- lognPar(mu.hosp,sd.hosp)$mulog
s.hosp <- lognPar(mu.hosp,sd.hosp)$sigmalog
tau.hosp <- 1/s.hosp^2
c.drug <- c(110,520)
# Number of patients in the population
N <- 1000
## Run JAGS
library(R2jags)
dataJags <- list("se","amb","n","N.studies","a.pi","b.pi","a.gamma",		# data list
"b.gamma","m.amb","tau.amb","m.hosp",
"tau.hosp","m.rho","tau.rho","N")
params <- c("pi","gamma","c.amb","c.hosp","rho","SE","A","H")			# parameters list
inits <- function(){								# randomly initialise relevant variables
SE=rbinom(2,N,.2)
list(pi=c(runif(1),NA),gamma=runif(1),c.amb=rlnorm(1),
c.hosp=rlnorm(1),rho=runif(1),SE=SE,A=rbinom(2,SE,.2))
}
n.iter <- 20000
n.burnin <- 9500
n.thin <- floor((n.iter-n.burnin)/250)
chemo <- jags(dataJags, inits, params, model.file=filein,
n.chains=2, n.iter, n.burnin, n.thin,
DIC=TRUE, working.directory=working.dir, progress.bar="text")
