abline(v = HDInterval::hdi(sucra2[i,],0.95), col = c("red","green","blue")[i], lty = 2)
}
#####
# Red, blue, green plots are separate treatments, black plot is combined one
par(mar = c(6, 4.1, 4.1, 2.1))
for( i in 1:3){
f = switch(ifelse(i==1,1,2), plot,lines)
cb = c(sucra2)
f(density(sucra2[i,]),  col = c("red","green","blue")[i],xlim = c(min(cb), max(cb)) )
abline(v = HDInterval::hdi(sucra2[i,],0.95), col = c("red","green","blue")[i], lty = 2)
}
legend("topleft", legend=c("IN Dexmedetomidine", "Midazolam","NO"),
col=c("red", "green","blue"), lty=1, cex=0.8, xpd = T, horiz = T)
#####
# Red, blue, green plots are separate treatments, black plot is combined one
windows(width = 4, height = 4)
#####
# Red, blue, green plots are separate treatments, black plot is combined one
windows(width = 4, height = 4)
#####
# Red, blue, green plots are separate treatments, black plot is combined one
opar <- par(no.readonly = TRUE)
par(mar = c(6, 4.1, 4.1, 2.1))
for( i in 1:3){
f = switch(ifelse(i==1,1,2), plot,lines)
cb = c(sucra2)
f(density(sucra2[i,]),  col = c("red","green","blue")[i],xlim = c(min(cb), max(cb)) )
abline(v = HDInterval::hdi(sucra2[i,],0.95), col = c("red","green","blue")[i], lty = 2)
}
legend("topleft", legend=c("IN Dexmedetomidine", "Midazolam","NO"),
col=c("red", "green","blue"), lty=1, cex=0.8, xpd = T, horiz = T)
on.exit(par(opar))
legend("bottom", legend=c("IN Dexmedetomidine", "Midazolam","NO"),
col=c("red", "green","blue"), lty=1, cex=0.8, xpd = T, horiz = T)
#####
# Red, blue, green plots are separate treatments, black plot is combined one
opar <- par(no.readonly = TRUE)
par(mar = c(6, 4.1, 4.1, 2.1))
for( i in 1:3){
f = switch(ifelse(i==1,1,2), plot,lines)
cb = c(sucra2)
f(density(sucra2[i,]),  col = c("red","green","blue")[i],xlim = c(min(cb), max(cb)) )
abline(v = HDInterval::hdi(sucra2[i,],0.95), col = c("red","green","blue")[i], lty = 2)
}
legend("bottom", legend=c("IN Dexmedetomidine", "Midazolam","NO"),
col=c("red", "green","blue"), lty=1, cex=0.8, xpd = T, horiz = T)
on.exit(par(opar))
#####
# Red, blue, green plots are separate treatments, black plot is combined one
opar <- par(no.readonly = TRUE)
par(mar = c(6, 4.1, 4.1, 2.1))
for( i in 1:3){
f = switch(ifelse(i==1,1,2), plot,lines)
cb = c(sucra2)
f(density(sucra2[i,]),  col = c("red","green","blue")[i],xlim = c(min(cb), max(cb)) )
abline(v = HDInterval::hdi(sucra2[i,],0.95), col = c("red","green","blue")[i], lty = 2)
}
legend("bottom", legend=c("IN Dexmedetomidine", "Midazolam","NO"),
col=c("red", "green","blue"), lty=1, cex=0.8, xpd = T, horiz = T, inset = c(0, -0.5))
on.exit(par(opar))
legend("bottom", legend=c("IN Dexmedetomidine", "Midazolam","NO"),
col=c("red", "green","blue"), lty=1, cex=0.8, xpd = T, horiz = T, inset = c(0, -0.1))
legend("bottom", legend=c("IN Dexmedetomidine", "Midazolam","NO"),
col=c("red", "green","blue"), lty=1, cex=0.8, xpd = T, horiz = T, inset = c(0, -0.3))
legend("bottom", legend=c("IN Dexmedetomidine", "Midazolam","NO"),
col=c("red", "green","blue"), lty=1, cex=0.8, xpd = T, horiz = T, inset = c(0, -0.25))
#####
# Red, blue, green plots are separate treatments, black plot is combined one
opar <- par(no.readonly = TRUE)
par(mar = c(6, 4.1, 4.1, 2.1))
for( i in 1:3){
f = switch(ifelse(i==1,1,2), plot,lines)
cb = c(sucra2)
f(density(sucra2[i,]),  col = c("red","green","blue")[i],xlim = c(min(cb), max(cb)) )
abline(v = HDInterval::hdi(sucra2[i,],0.95), col = c("red","green","blue")[i], lty = 2)
}
legend("bottom", legend=c("IN Dexmedetomidine", "Midazolam","NO"),
col=c("red", "green","blue"), lty=1, cex=0.8, xpd = T, horiz = T, inset = c(0, -0.25))
on.exit(par(opar))
#####
# Red, blue, green plots are separate treatments, black plot is combined one
opar <- par(no.readonly = TRUE)
par(mar = c(6, 4.1, 4.1, 2.1))
for( i in 1:3){
f = switch(ifelse(i==1,1,2), partial(plot,main=""),lines)
cb = c(sucra2)
f(density(sucra2[i,]),  col = c("red","green","blue")[i],xlim = c(min(cb), max(cb)) )
abline(v = HDInterval::hdi(sucra2[i,],0.95), col = c("red","green","blue")[i], lty = 2)
}
legend("bottom", legend=c("IN Dexmedetomidine", "Midazolam","NO"),
col=c("red", "green","blue"), lty=1, cex=0.8, xpd = T, horiz = T, inset = c(0, -0.25))
on.exit(par(opar))
sucra2
sucra2[1,]
pr[,"Mean"]
#####
# Red, blue, green plots are separate treatments, black plot is combined one
opar <- par(no.readonly = TRUE)
par(mar = c(6, 4.1, 4.1, 2.1))
for( i in 1:3){
f = switch(ifelse(i==1,1,2), partial(plot,main="", xlab = expession(SUCRA^{(0)})),lines)
cb = c(sucra2)
f(density(sucra2[i,]),  col = c("red","green","blue")[i],xlim = c(min(cb), max(cb)) )
abline(v = HDInterval::hdi(sucra2[i,],0.95), col = c("red","green","blue")[i], lty = 2)
}
#####
# Red, blue, green plots are separate treatments, black plot is combined one
opar <- par(no.readonly = TRUE)
par(mar = c(6, 4.1, 4.1, 2.1))
for( i in 1:3){
f = switch(ifelse(i==1,1,2), partial(plot,main="", xlab = expression(SUCRA^{(0)})),lines)
cb = c(sucra2)
f(density(sucra2[i,]),  col = c("red","green","blue")[i],xlim = c(min(cb), max(cb)) )
abline(v = HDInterval::hdi(sucra2[i,],0.95), col = c("red","green","blue")[i], lty = 2)
}
legend("top", legend=c("IN Dexmedetomidine", "Midazolam","NO"),
col=c("red", "green","blue"), lty=1, cex=0.8, xpd = T, horiz = T, inset = c(0, -0.25))
on.exit(par(opar))
#####
# Red, blue, green plots are separate treatments, black plot is combined one
opar <- par(no.readonly = TRUE)
par(mar = c(6, 4.1, 4.1, 2.1))
for( i in 1:3){
f = switch(ifelse(i==1,1,2), partial(plot,main="", xlab = expression(SUCRA^{(t)})),lines)
cb = c(sucra2)
f(density(sucra2[i,]),  col = c("red","green","blue")[i],xlim = c(min(cb), max(cb)) )
abline(v = HDInterval::hdi(sucra2[i,],0.95), col = c("red","green","blue")[i], lty = 2)
}
legend("top", legend=c("IN Dexmedetomidine", "Midazolam","NO"),
col=c("red", "green","blue"), lty=1, cex=0.8, xpd = T, horiz = T, inset = c(0, -0.25))
on.exit(par(opar))
#####
# Red, blue, green plots are separate treatments, black plot is combined one
opar <- par(no.readonly = TRUE)
par(mar = c(6, 4.1, 4.1, 3.1))
for( i in 1:3){
f = switch(ifelse(i==1,1,2), partial(plot,main="", xlab = expression(SUCRA^{(t)})),lines)
cb = c(sucra2)
f(density(sucra2[i,]),  col = c("red","green","blue")[i],xlim = c(min(cb), max(cb)) )
abline(v = HDInterval::hdi(sucra2[i,],0.95), col = c("red","green","blue")[i], lty = 2)
}
legend("top", legend=c("IN Dexmedetomidine", "Midazolam","NO"),
col=c("red", "green","blue"), lty=1, cex=0.8, xpd = T, horiz = T, inset = c(0, -0.25))
on.exit(par(opar))
thres_drop = 0.3
# which datasets are dropped?
n_drop =  which(t(sucra2)< thres_drop, arr.ind = T)
n_drop = lapply(unique(n_drop[,1]), function(i){
d = n_drop[n_drop[,1]==i,]
switch(is.matrix(d)+1,matrix(d,nrow=1),d)%>%
`colnames<-`(c("row","col"))
})
drop1 = n_drop[sapply(n_drop,function(i) nrow(i) ==1)]%>% lift_dl(rbind)() # drop 1
sum(drop1[,2]!=1) # if trt2 or trt3 is dropped
drop2 = n_drop[sapply(n_drop,function(i) nrow(i) ==2)]%>% lift_dl(rbind)() # drop 2
sum(drop2[,2] ==3) # if trt3 is dropped
drop3 = n_drop[sapply(n_drop,function(i) nrow(i) ==3)]%>% lift_dl(rbind)(); drop3 # drop 3
rr<-
apply(dat_from_trials2,3, function(d){
pos = sapply(c("trt2","trt3"), function(tr){
GetPosMean(R, x = d[,tr], v_sq = v_sq, mu0 = pr[tr,"Mean"], sig_sq = pr[tr,"Variance"], beta = beta)
})
# apply(d,2,mean)["trt3"]
# apply(pos,2, mean)["trt3"]
# pr_inf["mean","trt3"]
#
mean(apply(pos,1,diff) < 0)
})
sum(rr>0.975)/S + length(unique(drop2[,"row"]))/S
sum(rr>0.99)/S + length(unique(drop2[,"row"]))/S
sqrt(nu/beta^2)
mu_0t = pr[,"Mean"]
v_sq = 2.77^2
sig_sq_t = pr[,"Variance"]
beta =  8 # 7
nu = beta/v_sq+1
n_0t = beta/sig_sq_t/(nu-1)
################################################################################
curve(dgamma(x,nu,beta), xlim = c(0,1), ylab = "Density", xlab = expression(lambda^{(t)}), lty = "solid", lwd = 2)
a = (1/v_sq- sqrt(nu/beta^2) )%>% {ifelse(.<0,0,.)}
b = 1/v_sq+ sqrt(nu/beta^2)
sqrt(nu/beta^2)
1/v_sq
nu/beta^2
?rep
N
seq(5,100, by = 10)
# packages installation
pacman::p_load(tidyverse, kableExtra, magrittr,scatterplot3d)
rel1 = data.frame(PSSS = c(2,3,4,5), OSBDR = c(0, 3.027, 4.945, 10.037))
rel2<-
data.frame( PSSS = c("2-3","4-5"),
OSBDR = sapply(list(2:3,4:5), function(i) mean(rel1$OSBDR[rel1$PSSS %in% i]))
)
info = cbind(PSSS = c(2,3,4,5), OSBDR = c(0, 3.027, 4.945, 10.037))
osbdr = sapply(list(2:3,4:5),function(i) {info[info[,'PSSS']==i,"OSBDR"]%>% mean()%>% `names<-`(paste0(i,collapse = "-"))})
pr<-
data.frame(
Treatment = c("IN Dexmedetomidine", "Midazolam", "Nitrous Oxide"),
Mean = mean(rep(osbdr, c(9,6)))%>% c(1.9,0.4),
Variance =  var(rep(osbdr, c(9,6)))  %>% c(rep(1.58^2,2))
)
row.names(pr)<- paste0("trt",1:3)
GetPosMean = function(size = 1, x, sig_sq, mu0, v_sq, beta){
n = length(x)
nu = beta/v_sq+1
n0 = beta/sig_sq/(nu-1)
# pos mean
mu_n = (n0*mu0+sum(x))/(n+n0)
beta_n = beta+(n-1)*var(x)/2+n*n0*(mean(x)-mu0)^2/2/(n+n0)
wiqid::rt2(size, location = mu_n, scale = sqrt(beta_n/(n+n0)/(nu+n/2)),df = 2*nu+n)
}
mu_0t = pr[,"Mean"]
v_sq = 2.77^2
sig_sq_t = pr[,"Variance"]
beta =  8 # 7
nu = beta/v_sq+1
n_0t = beta/sig_sq_t/(nu-1)
optimize(f = function(x) dgamma(x, nu,beta), interval = c(0,100), maximum = T)$maximum %>%
{round(.,3)== round(1/v_sq,3)}
sapply(beta/n_0t, function(i) optimize(f = function(x) dgamma(x, nu,i), interval = c(0,100), maximum = T)$maximum)%>%
{round(.,3) == round(1/sig_sq_t,3)}
R <- S <- 2500
N = seq(5,100,by = 5)
set.seed(12345)
alc1trt<-
sapply(N, function(n){ # for each sample size n
replicate(R,{ # repeat R time to calculate average
# beta =  rexp(1,0.17)
# nu = beta/v_sq+1
# n_0t = beta/sig_sq_t/(nu-1)
##################
lambda = rgamma(1, nu,beta) # simulate lambda
mu_t = sapply(1:3, function(i) rnorm(1,mu_0t[i],sqrt(1/n_0t[i]/lambda))) # simulate mu_t
x_t = sapply(mu_t, function(i) rnorm(n,i,sqrt(1/lambda)))%>%
`colnames<-`(paste0("trt",1:3))
sapply(paste0("trt",1:3), function(i){
GetPosMean(R, x_t[,i], sig_sq = pr[i,"Variance"], mu0 = pr[i,"Mean"], v_sq = v_sq, beta = beta)%>%
purrr::compose(unname,diff,HDInterval::hdi)()
})
})%>% apply(1,mean)
})
d = cbind(N,t(alc1trt), max = apply(alc1trt,2,max))
d<-
as.data.frame(d)%>%
`names<-`(c("Sample size", "Treatment 1", "Treatment 2", "Treatment 3","Max{ALC}"))
# packages installation
pacman::p_load(tidyverse, kableExtra, magrittr,scatterplot3d)
rel1 = data.frame(PSSS = c(2,3,4,5), OSBDR = c(0, 3.027, 4.945, 10.037))
rel2<-
data.frame( PSSS = c("2-3","4-5"),
OSBDR = sapply(list(2:3,4:5), function(i) mean(rel1$OSBDR[rel1$PSSS %in% i]))
)
info = cbind(PSSS = c(2,3,4,5), OSBDR = c(0, 3.027, 4.945, 10.037))
osbdr = sapply(list(2:3,4:5),function(i) {info[info[,'PSSS']==i,"OSBDR"]%>% mean()%>% `names<-`(paste0(i,collapse = "-"))})
pr<-
data.frame(
Treatment = c("IN Dexmedetomidine", "Midazolam", "Nitrous Oxide"),
Mean = mean(rep(osbdr, c(9,6)))%>% c(1.9,0.4),
Variance =  var(rep(osbdr, c(9,6)))  %>% c(rep(1.58^2,2))
)
# packages installation
pacman::p_load(tidyverse, kableExtra, magrittr,scatterplot3d)
rel1 = data.frame(PSSS = c(2,3,4,5), OSBDR = c(0, 3.027, 4.945, 10.037))
rel2<-
data.frame( PSSS = c("2-3","4-5"),
OSBDR = sapply(list(2:3,4:5), function(i) mean(rel1$OSBDR[rel1$PSSS %in% i]))
)
info = cbind(PSSS = c(2,3,4,5), OSBDR = c(0, 3.027, 4.945, 10.037))
osbdr = sapply(list(2:3,4:5),function(i) {info[info[,'PSSS']==i,"OSBDR"]%>% mean()%>% `names<-`(paste0(i,collapse = "-"))})
pr<-
data.frame(
Treatment = c("IN Dexmedetomidine", "Midazolam", "Nitrous Oxide"),
Mean = mean(rep(osbdr, c(9,6)))%>% c(1.9,0.4),
Variance =  var(rep(osbdr, c(9,6)))  %>% c(rep(1.58^2,2))
)
row.names(pr)<- paste0("trt",1:3)
GetPosMean = function(size = 1, x, sig_sq, mu0, v_sq, beta){
n = length(x)
nu = beta/v_sq+1
n0 = beta/sig_sq/(nu-1)
# pos mean
mu_n = (n0*mu0+sum(x))/(n+n0)
beta_n = beta+(n-1)*var(x)/2+n*n0*(mean(x)-mu0)^2/2/(n+n0)
wiqid::rt2(size, location = mu_n, scale = sqrt(beta_n/(n+n0)/(nu+n/2)),df = 2*nu+n)
}
mu_0t = pr[,"Mean"]
v_sq = 2.77^2
sig_sq_t = pr[,"Variance"]
beta =  8 # 7
nu = beta/v_sq+1
n_0t = beta/sig_sq_t/(nu-1)
optimize(f = function(x) dgamma(x, nu,beta), interval = c(0,100), maximum = T)$maximum %>%
{round(.,3)== round(1/v_sq,3)}
sapply(beta/n_0t, function(i) optimize(f = function(x) dgamma(x, nu,i), interval = c(0,100), maximum = T)$maximum)%>%
{round(.,3) == round(1/sig_sq_t,3)}
R <- S <- 2500
N = seq(5,100,by = 5)
set.seed(12345)
alc1trt<-
sapply(N, function(n){ # for each sample size n
replicate(R,{ # repeat R time to calculate average
# beta =  rexp(1,0.17)
# nu = beta/v_sq+1
# n_0t = beta/sig_sq_t/(nu-1)
##################
lambda = rgamma(1, nu,beta) # simulate lambda
mu_t = sapply(1:3, function(i) rnorm(1,mu_0t[i],sqrt(1/n_0t[i]/lambda))) # simulate mu_t
x_t = sapply(mu_t, function(i) rnorm(n,i,sqrt(1/lambda)))%>%
`colnames<-`(paste0("trt",1:3))
sapply(paste0("trt",1:3), function(i){
GetPosMean(R, x_t[,i], sig_sq = pr[i,"Variance"], mu0 = pr[i,"Mean"], v_sq = v_sq, beta = beta)%>%
purrr::compose(unname,diff,HDInterval::hdi)()
})
})%>% apply(1,mean)
})
d = cbind(N,t(alc1trt), max = apply(alc1trt,2,max))
d<-
as.data.frame(d)%>%
`names<-`(c("Sample size", "Treatment 1", "Treatment 2", "Treatment 3","Max{ALC}"))
# save(d, file = "ALC_table.RData")
sapply(1:19, function(i) d[i+1,5]-d[i,5] )
d
beta_val = c(0.1,1,10,100,1000,10000)%>%{c(.,.*5)}%>% sort()
by_beta<-
sapply(beta_val, function(b){ # for each sample size n
beta =  b
nu = beta/v_sq+1
n_0t = beta/sig_sq_t/(nu-1)
replicate(R,{ # repeat R time to calculate average
lambda = rgamma(1, nu,beta) # simulate lambda
mu_t = sapply(1:3, function(i) rnorm(1,mu_0t[i],sqrt(1/n_0t[i]/lambda))) # simulate mu_t
x_t = sapply(mu_t, function(i) rnorm(95,i,sqrt(1/lambda)))%>%
`colnames<-`(paste0("trt",1:3))
sapply(paste0("trt",1:3), function(i){
GetPosMean(R, x_t[,i], sig_sq = pr[i,"Variance"], mu0 = pr[i,"Mean"], v_sq = v_sq, beta = b)%>%
HDInterval::hdi()%>%
diff()%>%
unname()
})
})%>% apply(1,mean)
})
m = cbind(beta_val,t(by_beta),"Max" = apply(by_beta,2,max))
m
scen1_mean = 4.17
n = 95
dat_from_trials1<- # same mean and sd  (for type 1 error)
replicate(S,replicate(3, rnorm(n, scen1_mean, sqrt(v_sq))))
# add column name
dimnames(dat_from_trials1)[[2]]<- paste0("trt",1:3)
# type I error rate
sucra1<-
apply(dat_from_trials1,3, function(d){ # for each each trial d
pos_mean<-
vapply(rownames(pr),function(i){
GetPosMean(R, x = d[1:55,i], sig_sq = pr[i,"Variance"], mu0 = pr[i,"Mean"],v_sq = v_sq,beta = beta)
}, rep(NA_real_,R) )
ranking<-
apply(pos_mean, 1, order)%>%
`row.names<-`(paste0("R",1:3))%>%
apply(1, function(i) vapply(`names<-`(1:3,1:3), function(z) mean(i==z),c(NA_real_)))
cdf_rk <- apply(ranking, 1, cumsum)
# get Surface under the cumulative ranking (SUCRA)
(cdf_rk[1,]+cdf_rk[2,])/2
})
# obtain index of dropped trial and trt
#--------------------------------------------------------------------------------------
# k = 0.3
type1_97<-
sapply(c(0.2,0.25,0.3,0.35,0.4,0.45), function(k){
drop_ind = which(t(sucra1 < k), arr.ind = T)
drop_ind = lapply(unique(drop_ind[,1]), function(i){
d = drop_ind[drop_ind[,1]==i,]
switch(is.matrix(d)+1,matrix(d,nrow=1),d)%>%
`colnames<-`(c("row","col"))
})
# convert array to list and data.frame (data.frame isn't changed after removing 2 cols)
d = lapply(1:S, function(i) as_tibble(dat_from_trials1[,,i]))
for(i in drop_ind ){
d[[unique(i[,"row"])]]<- d[[unique(i[,"row"])]][,-i[,"col"]]
}
dat_from_trials1b<- lapply(d, as.matrix) # removed futile treatment(s)
### drop 2 treatments (remain 1 trt)
drop1= purrr::keep(dat_from_trials1b, ~ncol(.)==1)
# probability that trt3 is superior
# p1 = ifelse(is.null(drop1[1][[1]]),0, sum(sapply(drop1,colnames)=="trt3")/S) # power
p1 = ifelse(is.null(drop1[1][[1]]),0, length(drop1)/S)
### drop 1 treatment (remain 2)
drop2 = purrr::keep(dat_from_trials1b, ~ncol(.)==2)
# consider possibility of trt3 win
# compare remained trts
if(is.null(drop2[1][[1]])){
p2<- 0
} else{
p2<-
sapply(drop2, function(dat){
trt = colnames(dat)
pos1 = GetPosMean(R, x = dat[,trt[1]], sig_sq = pr[trt[1],"Variance"], mu0 =pr[trt[1],"Mean"], v_sq =v_sq, beta = beta)
pos2 = GetPosMean(R, dat[,trt[2]], sig_sq = pr[trt[2],"Variance"], mu0 =pr[trt[2],"Mean"], v_sq = v_sq, beta = beta)
r= mean(pos2-pos1 <0)
return(r)
})%>% {sum(.>0.975)/S + sum(.<0.025)/S} # This is like SUCRA but we need to consider all SUCRAs
# so we also need to consder all treatments as optimal.
## Here we are wrong again because we need both > 0.95 AND < 0.05.
## Plus we need the proportion of trials that achieve this...
## Plus, we don't only want treatment 3...
}
### no trt dropped
drop3<- purrr::keep(dat_from_trials1b, ~ncol(.)==3)
# obtain SUCRA for all available patients
if(is.null(drop3[1][[1]])){
p3 = 0
} else{
r<-
sapply(drop3, function(d){
pos_mean<-
purrr::set_names(c("trt1","trt2","trt3"))%>%
vapply(function(i){
GetPosMean(R, x = d[,i], v_sq = v_sq, mu0 = pr[i,"Mean"], sig_sq =  pr[i,"Variance"], beta = beta)
}, numeric(R))
ranking<-
apply(pos_mean, 1, order)%>%
`row.names<-`(paste0("R",1:3))%>%
apply(1, function(i) sapply(purrr::set_names(1:3), function(z) mean(i==z) )  )
cdf_rk <- apply(ranking, 1, cumsum)
# get Surface under the cumulative ranking (SUCRA)
(cdf_rk[1,]+cdf_rk[2,])/2
})
p3<- apply(r, 1, function(x){x > 0.975}) %>% sum(.)/S
# sum(r["3",]>0.95)/S # power
## Need to include all three treatments
## Need to calculate probability WRT to number of simulations
}
p1+p2+p3
})
thres = cbind(thres = c(0.2,0.25,0.3,0.35,0.4,0.45),type1= type1_97)%>%
as.data.frame()%>%
`names<-`(c("Threshold", "Type I error rate"))
thres
dat_from_trials2<- # different mean, same sd (for power)
replicate(S,vapply(pr[,"Mean"], rnorm, n = n, sd = sqrt(v_sq), FUN.VALUE = rep(NA_real_,n)))
dimnames(dat_from_trials2)[[2]]<- paste0("trt",1:3)
###################
sucra2<-
apply(dat_from_trials2,3, function(d){
pos_mean<-
c("trt1","trt2","trt3")%>%
vapply(function(i){
GetPosMean(R, x = d[1:55,i], v_sq = v_sq, mu0 = pr[i,"Mean"],sig_sq = pr[i,"Variance"], beta = beta)
}, rep(NA_real_,R))
ranking<-
apply(pos_mean, 1, order)%>%
`row.names<-`(paste0("R",1:3))%>%
apply(1, function(i) vapply(purrr::set_names(1:3), function(z) mean(i==z), c(NA_real_)))
cdf_rk <- apply(ranking, 1, cumsum)
# get Surface under the cumulative ranking (SUCRA)
(cdf_rk[1,]+cdf_rk[2,])/2
})
#####
# Red, blue, green plots are separate treatments, black plot is combined one
opar <- par(no.readonly = TRUE)
par(mar = c(6, 4.1, 4.1, 3.1))
for( i in 1:3){
f = switch(ifelse(i==1,1,2), partial(plot,main="", xlab = expression(SUCRA^{(t)})),lines)
cb = c(sucra2)
f(density(sucra2[i,]),  col = c("red","green","blue")[i],xlim = c(min(cb), max(cb)) )
abline(v = HDInterval::hdi(sucra2[i,],0.95), col = c("red","green","blue")[i], lty = 2)
}
legend("top", legend=c("IN Dexmedetomidine", "Midazolam","NO"),
col=c("red", "green","blue"), lty=1, cex=0.8, xpd = T, horiz = T, inset = c(0, -0.25))
on.exit(par(opar))
thres_drop = 0.3
# which datasets are dropped?
n_drop =  which(t(sucra2)< thres_drop, arr.ind = T)
n_drop = lapply(unique(n_drop[,1]), function(i){
d = n_drop[n_drop[,1]==i,]
switch(is.matrix(d)+1,matrix(d,nrow=1),d)%>%
`colnames<-`(c("row","col"))
})
drop1 = n_drop[sapply(n_drop,function(i) nrow(i) ==1)]%>% lift_dl(rbind)() # drop 1
sum(drop1[,2]!=1) # if trt2 or trt3 is dropped
drop2 = n_drop[sapply(n_drop,function(i) nrow(i) ==2)]%>% lift_dl(rbind)() # drop 2
sum(drop2[,2] ==3) # if trt3 is dropped
drop3 = n_drop[sapply(n_drop,function(i) nrow(i) ==3)]%>% lift_dl(rbind)(); drop3 # drop 3
drop2
rr<-
apply(dat_from_trials2,3, function(d){
pos = sapply(c("trt2","trt3"), function(tr){
GetPosMean(R, x = d[,tr], v_sq = v_sq, mu0 = pr[tr,"Mean"], sig_sq = pr[tr,"Variance"], beta = beta)
})
# apply(d,2,mean)["trt3"]
# apply(pos,2, mean)["trt3"]
# pr_inf["mean","trt3"]
#
mean(apply(pos,1,diff) < 0)
})
sum(rr>0.975)/S + length(unique(drop2[,"row"]))/S
length(unique(drop2[,"row"]))/S
m = 1/3
beta = 2
nu = beta/mu+1
curve(dgamma(x,nu,beta))
curve(dgamma(x,nu,beta), xlim = c(0,5))
?HDInterval::hdi
HDInterval::hdi(rgamma(10000,nu,beta))
HDInterval::hdi(rgamma(10000,nu,beta),0.7)
m = 1/2.77^2
beta = 8
nu = beta/mu+1
curve(dgamma(x,nu,beta), xlim = c(0,5))
HDInterval::hdi(rgamma(10000,nu,beta),0.7)
m
