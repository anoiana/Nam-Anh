result[index]
val[index] ^ 2
val[index]
val[1]
a = 1:2
a[0]
val[0]
val[1]
val[0]^2
d = ggplot2::diamonds
names(diamond)
names(d)
ggplot(d, aes(x = price, y = depth))+ geom_point()
which(d$price == max(d$price))
d[which(d$price == max(d$price)),]
ggplot(d, aes(x = depth, y = price))+ geom_point()
d[which(d$price == max(d$price)),]
ggplot(d, aes(x = depth, y = price))+ geom_point(alpha = 0.1)
ggplot(d, aes(x = depth, y = price))+ geom_point(alpha = 0.1)+
scale_x_continuous(breaks = c(0,80))
ggplot(d, aes(x = depth, y = price))+ geom_point(alpha = 0.1)+
scale_x_continuous(breaks = c(0,80,2))
ggplot(d, aes(x = depth, y = price))+ geom_point(alpha = 0.1)+
scale_x_continuous(breaks = seq(0,80,2))
ggplot(d, aes(x = depth, y = price))+ geom_point(alpha = 0.1)+
scale_x_continuous(breaks = seq(0,80,1))
install.packages("dagitty")
dagitty::dagitty(cancer ~ smoking, coffee ~ smoking)
dagitty::dagitty('cancer' ~ 'smoking', 'coffee' ~ 'smoking')
dagitty::dagity('cancer' ~ 'smoking', 'coffee' ~ 'smoking')
install.packages("ggdag")
ggdag::dagify(cancer ~ smoking, coffee ~ smoking)
ggdag::dagify(cancer ~ smoking, coffee ~ smoking) %>% ggdag::ggdag()
library(magrittr)
ggdag::dagify(cancer ~ smoking, coffee ~ smoking) %>% ggdag::ggdag()
1998257*4+2329960
2329960*2.5
2329960*4
2329960*5
2329960*5 - 4819*5
30/13
10*3/23
9*3*10/(9*3+20)
3*10/(9*3+20)
remotes::install_github("rstudio/distill")
install.packages("rmarkdown")
remotes::install_github("rstudio/distill")
getwd()
setwd("~/Documents")
getwd()
setwd("~/Documents/website")
setwd()
getwd()
distill::create_website(dir = getwd(), gh_pages = TRUE)
git fetch
sessioninfo::platform_info()
library(lubridate, warn.conflicts = FALSE)
library(lubridate, warn.conflicts = FALSE)
install.packages("lubridate")
install.packages("lubridate")
3.97+2.27+0.97+1.97+5+5+3.28
3.97+2.27+0.97+1.97+5+5+3.28
install.packages("epurate")
install_github("holtzy/epuRate")
devtools::install_github("holtzy/epuRate")
install.packages("readODS")
setwd("~/Documents")
readODS::read_ods("Ch2_FE_Bi_logit_pair.odc")
readODS::read.ods("Ch2_FE_Bi_logit_pair.odc")
install.packages("nmathresh")
dat.raww <- read.delim(system.file("extdata", "Thrombo_data.txt", package = "nmathresh"))
dat.raww
str(dat.raww)
install.packages("gemtc")
gemtc::thrombolytic
install.packages("R2WinBUGS")
gemtc::thrombolytic
library(magrittr)
gemtc::thrombolytic %>% {.[nrow(.)-11+1,]}
gemtc::thrombolytic %>% {.[(nrow(.)-11+1):nrow(.)  ,]}
gemtc::thrombolytic %>% {.[(nrow(.)-11+1):nrow(.),]}
nrow(gemtc::thrombolytic)
gemtc::thrombolytic$data.ab
gemtc::thrombolytic$data.ab %>% nrow()
gemtc::thrombolytic$data.ab %>% {.[rev((nrow(.):1)[1:11]),]}
gemtc::thrombolytic$description
gemtc::thrombolytic$treatments
gemtc::thrombolytic$data.ab
gemtc::thrombolytic$data.ab %>% {.[rev((nrow(.):1)[1:22]),]}
d = gemtc::thrombolytic$data.ab %>% {.[rev((nrow(.):1)[1:22]),]}
library(tidyverse)
pivot_wider(d, study)
pivot_wider(d, names_from = treatment)
pivot_wider(d, names_from = 'treatment', values_from = c("responders","sampleSize"))
pivot_wider(d, names_from = 'study')
d
tapply(d,"study", function(x) x[1,"responders"])
?tapply
group_by(d, study, function(x) x[1,])
?group_map
group_by(d, study)%>% group_map(~ .[1,])
group_by(d, study)%>% group_modify(~ .[1,])
group_by(d, study)%>% group_map(~ mutate(., trt = c("trt1","trt2")))
group_by(d, study)%>% group_modify(~ mutate(., trt = c("trt1","trt2")))
group_by(d, study)%>% group_modify(~ mutate(., trt = c("trt1","trt2")))%>% pivot_wider(names_from = "trt", values_from = responders)
group_by(d, study)%>% group_modify(~ mutate(., trt = c("trt1","trt2")))%>% pivot_wider(names_from = "trt", values_from = 'responders')
?pivot_wider()
group_by(d, study)%>% group_modify(~ mutate(., trt = c("trt1","trt2")))%>% pivot_wider(c(-"study"),names_from = "trt", values_from = 'responders')
group_by(d, study)%>% group_modify(~ mutate(., trt = c("trt1","trt2")))%>% pivot_wider(-c("study","treatment"),names_from = "trt", values_from = 'responders')
group_by(d, study)%>% group_modify(~ mutate(., trt = c("trt1","trt2")))%>% pivot_wider(-c("study","treatment","sampleSize"),names_from = "trt", values_from = 'responders')
group_by(d, study)%>% group_modify(~ mutate(., trt = c("trt1","trt2")))%>% select(trt, responders)%>% pivot_wider(names_from = "trt", values_from = 'responders')
group_by(d, study)%>% group_modify(~ mutate(., trt = c("trt1","trt2")))%>% ungroup() %>%select(trt, responders)%>% pivot_wider(names_from = "trt", values_from = 'responders')
group_by(d, study)%>% group_modify(~ mutate(., trt = c("trt1","trt2")))%>% select(trt, responders)%>% pivot_wider(names_from = "trt", values_from = 'responders')
gemtc::thrombolytic
gemtc::thrombolytic
dat = gemtc::thrombolytic$data.ab
dat
dat[,18:28]
dat = gemtc::thrombolytic$data.ab
dat[18:28,]
dat[17:28,]
dat[15:28,]
dat[13:28,]
dat
dat
5 75 5 75 # Vermeer 1999
5 69 3 71 # Schomig 2000
2 61 3 62 # LeMay 2001
19 419 20 421 # Bonnefoy 2002
59 782 52 790 # Andersen 2002
5 81 2 81 # Kastrati 2002
16 226 12 225 # Aversano 2002
8 66 6 71 # Grines 2002"
a<-"3 55 1 55 # Ribichini 1996
10 94 3 95 # Garcia 1997
40 573 32 565 # GUSTO-2 1997
5 75 5 75 # Vermeer 1999
5 69 3 71 # Schomig 2000
2 61 3 62 # LeMay 2001
19 419 20 421 # Bonnefoy 2002
59 782 52 790 # Andersen 2002
5 81 2 81 # Kastrati 2002
16 226 12 225 # Aversano 2002
8 66 6 71 # Grines 2002"
a
8 66 6 71 # Grines 2002"%>%
stringr::str_remove_all("\\n")
a<-"3 55 1 55 # Ribichini 1996
10 94 3 95 # Garcia 1997
40 573 32 565 # GUSTO-2 1997
5 75 5 75 # Vermeer 1999
5 69 3 71 # Schomig 2000
2 61 3 62 # LeMay 2001
19 419 20 421 # Bonnefoy 2002
59 782 52 790 # Andersen 2002
5 81 2 81 # Kastrati 2002
16 226 12 225 # Aversano 2002
8 66 6 71 # Grines 2002"
stringr::str_remove_all(a,"\\n")
a<-"3 55 1 55 # Ribichini 1996
10 94 3 95 # Garcia 1997
40 573 32 565 # GUSTO-2 1997
5 75 5 75 # Vermeer 1999
5 69 3 71 # Schomig 2000
2 61 3 62 # LeMay 2001
19 419 20 421 # Bonnefoy 2002
59 782 52 790 # Andersen 2002
5 81 2 81 # Kastrati 2002
16 226 12 225 # Aversano 2002
8 66 6 71 # Grines 2002"
a
stringr::str_remove_all(a,"#.+(?=\\n)")
stringr::str_remove_all(a,"#.+(?=\\n)")%>%
stringr::str_remove_all("#.+")
stringr::str_remove_all(a,"#.+(?=\\n)")%>%
stringr::str_remove_all("#.+")%>%
stringr::str_split(" \\n")
stringr::str_remove_all(a,"#.+(?=\\n)")%>%
stringr::str_remove_all("#.+")%>%
stringr::str_split(" \\n")%>%
unlist()
stringr::str_remove_all(a,"#.+(?=\\n)")%>%
stringr::str_remove_all("#.+")%>%
stringr::str_split(" \\n")%>%
unlist()%>%
map(~ stringr::str_split(.," "))
stringr::str_remove_all(a,"#.+(?=\\n)")%>%
stringr::str_remove_all("#.+")%>%
stringr::str_split(" \\n")%>%
unlist()%>%
map(~ stringr::str_split(.," ")%>% unlist())
stringr::str_remove_all(a,"#.+(?=\\n)")%>%
stringr::str_remove_all("#.+")%>%
stringr::str_split(" \\n")%>%
unlist()%>%
map(~ stringr::str_split(.," ")%>% unlist())%>%
map(~ `names<-`(.,c("r1","n1","r2","n2"))%>% lift_dv(tibble)())
stringr::str_remove_all(a,"#.+(?=\\n)")%>%
stringr::str_remove_all("#.+")%>%
stringr::str_split(" \\n")%>%
unlist()%>%
map(~ stringr::str_split(.," ")%>% unlist())%>%
map_dfr(~ `names<-`(.,c("r1","n1","r2","n2"))%>% lift_dv(tibble)())
stringr::str_remove_all(a,"#.+(?=\\n)")%>%
stringr::str_remove_all("#.+")%>%
stringr::str_split(" \\n")%>%
unlist()%>%
map(~ stringr::str_split(.," ")%>% unlist())%>%
map_dfr(~ `names<-`(.,c("r1","n1","r2","n2"))%>% lift_dv(tibble)())%>%
select(r1,n1,r2,n2)
a<-
stringr::str_remove_all(a,"#.+(?=\\n)")%>%
stringr::str_remove_all("#.+")%>%
stringr::str_split(" \\n")%>%
unlist()%>%
map(~ stringr::str_split(.," ")%>% unlist())%>%
map_dfr(~ `names<-`(.,c("r1","n1","r2","n2"))%>% lift_dv(tibble)())%>%
select(r1,n1,r2,n2)
a
list(r = select(a,r1,r2))
list(r = select(a,r1,r2)%>% as.matrix())
list(r = select(a,r1,r2) )
a<-
stringr::str_remove_all(a,"#.+(?=\\n)")%>%
stringr::str_remove_all("#.+")%>%
stringr::str_split(" \\n")%>%
unlist()%>%
map(~ stringr::str_split(.," ")%>% unlist())%>%
map_dfr(~ `names<-`(.,c("r1","n1","r2","n2"))%>% lift_dv(tibble)())%>%
select(r1,n1,r2,n2)%>%
modify(as.numeric)
a<-"3 55 1 55 # Ribichini 1996
10 94 3 95 # Garcia 1997
40 573 32 565 # GUSTO-2 1997
5 75 5 75 # Vermeer 1999
5 69 3 71 # Schomig 2000
2 61 3 62 # LeMay 2001
19 419 20 421 # Bonnefoy 2002
59 782 52 790 # Andersen 2002
5 81 2 81 # Kastrati 2002
16 226 12 225 # Aversano 2002
8 66 6 71 # Grines 2002"
a<-
stringr::str_remove_all(a,"#.+(?=\\n)")%>%
stringr::str_remove_all("#.+")%>%
stringr::str_split(" \\n")%>%
unlist()%>%
map(~ stringr::str_split(.," ")%>% unlist())%>%
map_dfr(~ `names<-`(.,c("r1","n1","r2","n2"))%>% lift_dv(tibble)())%>%
select(r1,n1,r2,n2)%>%
modify(as.numeric)
list(r = select(b,r1,r2) )
list(r = select(a,r1,r2) )
list(r = select(a,r1,r2)%>% as.matrix() )
list(r = select(a,r1,r2)%>% as.matrix(), n = select(a,n1,n2)%>% as.matrix())
d = list(r = select(a,r1,r2)%>% as.matrix(), n = select(a,n1,n2)%>% as.matrix())
setwd("~/Documents/website")
d
save(d, "images/thrombolytic.RData")
?save
setwd("~/Documents/website")
save(d, "images/thrombolytic.RData")
d
d
save(d, "_data/thrombolytic.RData")
?save
save(d, file  = "_data/thrombolytic.RData")
source("_data/thrombolytic.RData")
load("_data/thrombolytic.RData")
load("_data/thrombolytic.RData")
load("_data/thrombolytic.RData")
install.packages("rjags")
library(rjags)
mass <- c(29.9, 1761, 1807, 2984, 3230, 5040, 5654)
age <- c(2, 15, 14, 16, 18, 22, 28)
n <- length(age)
data <- list(mass=mass,age=age,n=n)
# (1) Define the model as a string
model_string <- textConnection("model{
# Likelihood (dnorm uses a precision, not variance)
for(i in 1:n){
mass[i] ~ dnorm(beta1 + beta2*age[i],tau)
}
# Priors
tau ~ dgamma(0.1, 0.1)
sigma <- 1/sqrt(tau)
beta1 ~ dnorm(0, 0.001)
beta2 ~ dnorm(0, 0.001)
}")
mass <- c(29.9, 1761, 1807, 2984, 3230, 5040, 5654)
age <- c(2, 15, 14, 16, 18, 22, 28)
n <- length(age)
data <- list(mass=mass,age=age,n=n)
# (1) Define the model as a string
model_string <- textConnection("model{
# Likelihood (dnorm uses a precision, not variance)
for(i in 1:n){
mass[i] ~ dnorm(beta1 + beta2*age[i],tau)
}
# Priors
tau ~ dgamma(0.1, 0.1)
sigma <- 1/sqrt(tau)
beta1 ~ dnorm(0, 0.001)
beta2 ~ dnorm(0, 0.001)
}")
# (2) Load the data, specify initial values and compile the MCMC code
inits <- list(beta1=rnorm(1),beta2=rnorm(1),tau=rgamma(1,1))
model <- jags.model(model_string,data = data, inits=inits, n.chains=2)
# (3) Burn-in for 10000 samples
update(model, 10000, progress.bar="none")
# (4) Generate 20000 post-burn-in samples
params <- c("beta1","beta2","sigma")
samples <- coda.samples(model,
variable.names=params,
n.iter=20000, progress.bar="none")
# (5) Summarize the output
summary(samples)
library(rjags)
load("_data/thrombolytic.RData")
load("_data/thrombolytic.RData")
dat
throm
library(rjags)
load("_data/thrombolytic.RData")
d
data = append(d, ns = nrow(d$r))
data = append(d, "ns" = nrow(d$r))
data = purrr::splice(d, "ns" = nrow(d$r))
data
data = purrr::splice(d, "ns" = nrow(d$r))
model_string <- textConnection("model{ # *** PROGRAM STARTS
for(i in 1:ns){ # LOOP THROUGH STUDIES
mu[i] ~ dnorm(0,.0001) # vague priors for all trial baselines
for (k in 1:2) { # LOOP THROUGH ARMS
r[i,k] ~ dbin(p[i,k],n[i,k]) # binomial likelihood
logit(p[i,k]) <- mu[i] + d[k] # model for linear predictor
}
}
d[1]<- 0 # treatment effect is zero for reference treatment
d[2] ~ dnorm(0,.0001) # vague prior for treatment effect
}")
inits <- list(d=c( NA, 0), mu=c(0,0,0,0,0, 0,0,0,0,0, 0))
inits
inits <- list(d=c( NA, 0), mu=c(0,0,0,0,0, 0,0,0,0,0, 0))
model <- jags.model(model_string,data = data, inits=inits, n.chains=2)
# (3) Burn-in for 10000 samples
update(model, 10000, progress.bar="none")
params <- c("d","mu")
samples <- coda.samples(model,
variable.names=params,
n.iter=20000, progress.bar="none")
# (5) Summarize the output
summary(samples)
params <- c("d[2]")
samples <- coda.samples(model,
variable.names=params,
n.iter=20000, progress.bar="none")
# (5) Summarize the output
summary(samples)
inits <- list(d=c( NA, -1), mu=c(-3,-3,-3,-3,-3, -3,-3,-3,-3,-3, -3))
model <- jags.model(model_string,data = data, inits=inits, n.chains=2)
data = purrr::splice(d, "ns" = nrow(d$r))
model_string <- textConnection("model{ # *** PROGRAM STARTS
for(i in 1:ns){ # LOOP THROUGH STUDIES
mu[i] ~ dnorm(0,.0001) # vague priors for all trial baselines
for (k in 1:2) { # LOOP THROUGH ARMS
r[i,k] ~ dbin(p[i,k],n[i,k]) # binomial likelihood
logit(p[i,k]) <- mu[i] + d[k] # model for linear predictor
}
}
d[1]<- 0 # treatment effect is zero for reference treatment
d[2] ~ dnorm(0,.0001) # vague prior for treatment effect
}")
inits <- list(d=c( NA, -1), mu=c(-3,-3,-3,-3,-3, -3,-3,-3,-3,-3, -3))
model <- jags.model(model_string,data = data, inits=inits, n.chains=2)
# (3) Burn-in for 10000 samples
update(model, 10000, progress.bar="none")
params <- c("d[2]")
samples <- coda.samples(model,
variable.names=params,
n.iter=20000, progress.bar="none")
# (5) Summarize the output
summary(samples)
# (5) Summarize the output
summary(samples)
?jags.model()
summary(samples)
s = summary(samples)
s$statistics
s$quantiles
s$start
s
s = summary(samples)%>% lift_dl(list)()
s
model <- jags.model(model_string,data = data, inits=inits, n.chains=2)
data = purrr::splice(d, "ns" = nrow(d$r))
model_string <- textConnection("model{ # *** PROGRAM STARTS
for(i in 1:ns){ # LOOP THROUGH STUDIES
mu[i] ~ dnorm(0,.0001) # vague priors for all trial baselines
for (k in 1:2) { # LOOP THROUGH ARMS
r[i,k] ~ dbin(p[i,k],n[i,k]) # binomial likelihood
logit(p[i,k]) <- mu[i] + d[k] # model for linear predictor
}
}
d[1]<- 0 # treatment effect is zero for reference treatment
d[2] ~ dnorm(0,.0001) # vague prior for treatment effect
}")
inits <- list(d=c( NA, -1), mu=c(-3,-3,-3,-3,-3, -3,-3,-3,-3,-3, -3))
model <- jags.model(model_string,data = data, inits=inits, n.chains=2)
data = purrr::splice(d, "ns" = nrow(d$r))
model_string <- textConnection("model{ # *** PROGRAM STARTS
for(i in 1:ns){ # LOOP THROUGH STUDIES
mu[i] ~ dnorm(0,.0001) # vague priors for all trial baselines
for (k in 1:2) { # LOOP THROUGH ARMS
r[i,k] ~ dbin(p[i,k],n[i,k]) # binomial likelihood
logit(p[i,k]) <- mu[i] + d[k] # model for linear predictor
}
}
d[1]<- 0 # treatment effect is zero for reference treatment
d[2] ~ dnorm(0,.0001) # vague prior for treatment effect
}")
inits <- list(d=c( NA, -1), mu=c(-3,-3,-3,-3,-3, -3,-3,-3,-3,-3, -3))
model <- jags.model(model_string,data = data, inits=inits, n.chains=2, quiet = T)
s = summary(samples)%>% map(~ lift_dv(tibble)(.))
s
s = summary(samples)
```
s
model_string <- textConnection("model{ # *** PROGRAM STARTS
for(i in 1:ns){ # LOOP THROUGH STUDIES
mu[i] ~ dnorm(0,.0001) # vague priors for all trial baselines
for (k in 1:2) { # LOOP THROUGH ARMS
r[i,k] ~ dbin(p[i,k],n[i,k]) # binomial likelihood
logit(p[i,k]) <- mu[i] + d[k] # model for linear predictor
}
}
d[1]<- 0 # treatment effect is zero for reference treatment
d[2] ~ dnorm(0,.0001) # vague prior for treatment effect
}")
inits <- list(d=c( NA, -1), mu=c(-3,-3,-3,-3,-3, -3,-3,-3,-3,-3, -3))
model <- jags.model(model_string,data = data, inits=inits, n.chains=2, quiet = T)
update(model, 10000, progress.bar="none")
params <- c("d[2]")
samples <- coda.samples(model,
variable.names=params,
n.iter=20000, progress.bar="none")
s = summary(samples)
s
s[1:2]
s[[1]]
s[[1]][1:2]
lift_dv(tibble)(s[[1]][1:2])
lift_dv(tibble)(c(s[[1]][1:2], s[[2]]))
lift_dv(tibble)(c(s[[1]][1:2], s[[2]]))%>%
knitr::kable()
gemtc::thrombolytic
d = gemtc::thrombolytic$data.ab
dim(d)
d
head(d)
d$treatment %>% unique()
d
d[1,]
filter(d, study == 01)
filter(d, study == "01")
filter(d, treatment == "SK")
a<-
"GUSTO‐1 1993 3 SK Acc t‐PA SK + t‐PA 1,472 20,251 652 10,396 723 10,374
ECSG 1985 2 SK t‐PA 3 65 3 64
TIMI‐1 1987 2 SK t‐PA 12 159 7 157
PAIMS 1989 2 SK t‐PA 7 85 4 86
White 1989 2 SK t‐PA 10 135 5 135
GISSI‐2 1990 2 SK t‐PA 887 10,396 929 10,372
Cherng 1992 2 SK t‐PA 5 63 2 59
ISIS‐3 1992 2 SK t‐PA 1,455 13,780 1,418 13,746
CI 1993 2 SK t‐PA 9 130 6 123
KAMIT 1991 2 SK SK + t‐PA 4 107 6 109
INJECT 1995 2 SK r‐PA 285 3,004 270 3,006
Zijlstra 1993 2 SK PTCA 11 149 2 152
Riberio 1993 2 SK PTCA 1 50 3 50
Grinfeld 1996 2 SK PTCA 8 58 5 54
Zijlstra 1997 2 SK PTCA 1 53 1 47
Akhras 1997 2 SK PTCA 4 45 0 42
Widimsky 2000 2 SK PTCA 14 99 7 101
DeBoer 2002 2 SK PTCA 9 41 3 46"
a
stringr::str_split(a,"\\n")
stringr::str_split(a,"\\n")%>%
unlist()
stringr::str_split(a,"\\n")%>%
unlist()%>%
map(~stringr::str_split(.," ")%>% unlist())
install.packages("dmetar")
library(gemtc)
network <- mtc.network(data.re = gemtc::thrombolytic)
network <- mtc.network(data.re = gemtc::thrombolytic$data.ab)
gemtc::thrombolytic$data.ab
install.packages("SampleSizeProportions")
?SampleSizeProportions::propdiff.alc()
SampleSizeProportions::propdiff.alc(0.05, 3,11,11,54)
SampleSizeProportions::propdiff.alc(0.05, 3,11,11,54, equal = F)
SampleSizeProportions::propdiff.alc
0.95*10000
install.packages("SampleSizeBinomial")
install.packages("/Users/anhtran/Downloads/SampleSizeBinomial_1.1.tar.gz", repos = NULL, type =‘‘source’’)
?install.packages()
install.packages("/Users/anhtran/Downloads/SampleSizeBinomial_1.1.tar.gz", repos = NULL, type ="source")
install.packages(/Users/anhtran/Downloads/SampleSizeBinomial_1.1.tar.gz, repos = NULL, type ="source")
install.packages("Downloads/SampleSizeBinomial_1.1.tar.gz", repos = NULL, type ="source")
install.packages("/anhtran/Downloads/SampleSizeBinomial_1.1.tar.gz", repos = NULL, type ="source")
install.packages("/Downloads/SampleSizeBinomial_1.1.tar.gz", repos = NULL, type ="source")
install.packages("SampleSizeBinomial_1.1.tar.gz", repos = NULL, type ="source")
